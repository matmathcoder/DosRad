# Generated by Django 5.2.5 on 2025-09-06 11:04

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0003_compoundobject_compoundobjectcomposition_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExampleScene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('category', models.CharField(default='General', max_length=100)),
                ('scene_data', models.JSONField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ComputationConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('config_type', models.CharField(choices=[('nominal', 'Nominal'), ('minimum', 'Minimum'), ('maximum', 'Maximum')], max_length=20)),
                ('convergence_criterion', models.FloatField(default=0.01, help_text='Convergence criterion (0.001-0.1)')),
                ('particles_per_sample', models.IntegerField(default=10000, help_text='Number of particles per sample')),
                ('number_of_samples', models.IntegerField(default=100, help_text='Maximum number of samples')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computation_configurations', to='projects.project')),
            ],
            options={
                'verbose_name': 'Computation Configuration',
                'verbose_name_plural': 'Computation Configurations',
                'db_table': 'computation_configurations',
            },
        ),
        migrations.CreateModel(
            name='ComputationResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dose_rate', models.FloatField(help_text='Dose rate in Î¼Sv/h')),
                ('uncertainty', models.FloatField(help_text='Uncertainty in dose rate')),
                ('computation_time', models.IntegerField(help_text='Computation time in seconds')),
                ('converged', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('success', 'Success'), ('warning', 'Warning'), ('error', 'Error')], max_length=20)),
                ('log_data', models.JSONField(blank=True, help_text='Computation log data', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='projects.computationconfiguration')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='computation_results', to='projects.project')),
            ],
            options={
                'verbose_name': 'Computation Result',
                'verbose_name_plural': 'Computation Results',
                'db_table': 'computation_results',
            },
        ),
        migrations.CreateModel(
            name='ExampleSceneComposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('density', models.FloatField()),
                ('color', models.CharField(max_length=7)),
                ('elements', models.JSONField(default=list)),
                ('example_scene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='projects.examplescene')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExampleSceneGeometry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('geometry_type', models.CharField(max_length=50)),
                ('position', models.JSONField(default=dict)),
                ('rotation', models.JSONField(default=dict)),
                ('scale', models.JSONField(default=dict)),
                ('geometry_parameters', models.JSONField(default=dict)),
                ('color', models.CharField(default='#404040', max_length=7)),
                ('opacity', models.FloatField(default=1.0)),
                ('transparent', models.BooleanField(default=False)),
                ('order', models.IntegerField(default=0)),
                ('example_scene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geometries', to='projects.examplescene')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ExampleSceneSpectrum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('spectrum_type', models.CharField(max_length=20)),
                ('multiplier', models.FloatField(default=1.0)),
                ('lines', models.JSONField(default=list)),
                ('isotopes', models.JSONField(default=list)),
                ('example_scene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spectra', to='projects.examplescene')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ExampleSceneVolume',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('volume_name', models.CharField(max_length=255)),
                ('volume_type', models.CharField(default='solid', max_length=20)),
                ('real_density', models.FloatField(blank=True, null=True)),
                ('tolerance', models.FloatField(blank=True, null=True)),
                ('is_source', models.BooleanField(default=False)),
                ('gamma_selection_mode', models.CharField(default='by-lines', max_length=20)),
                ('calculation_mode', models.CharField(default='by-lines', max_length=20)),
                ('composition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.examplescenecomposition')),
                ('example_scene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='volumes', to='projects.examplescene')),
                ('geometry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='projects.examplescenegeometry')),
                ('spectrum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='projects.examplescenespectrum')),
            ],
            options={
                'ordering': ['volume_name'],
            },
        ),
        migrations.CreateModel(
            name='MeshConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coordinate_system', models.CharField(choices=[('cartesian', 'Cartesian'), ('cylindrical', 'Cylindrical'), ('spherical', 'Spherical')], max_length=20)),
                ('bounds', models.JSONField(help_text='Mesh bounds for each coordinate')),
                ('subdivisions', models.JSONField(help_text='Subdivision configuration for each interval')),
                ('is_validated', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mesh_configurations', to='projects.volume')),
            ],
            options={
                'verbose_name': 'Mesh Configuration',
                'verbose_name_plural': 'Mesh Configurations',
                'db_table': 'mesh_configurations',
            },
        ),
        migrations.CreateModel(
            name='ToleranceConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coordinate', models.CharField(help_text='Coordinate name (x, y, z, r, phi, theta)', max_length=10)),
                ('plus_delta', models.FloatField(default=0.0, help_text='Positive delta value')),
                ('plus_contribution', models.CharField(choices=[('+', '+'), ('-', '-')], default='+', max_length=1)),
                ('minus_delta', models.FloatField(default=0.0, help_text='Negative delta value')),
                ('minus_contribution', models.CharField(choices=[('+', '+'), ('-', '-')], default='+', max_length=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('volume', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tolerance_configurations', to='projects.volume')),
            ],
            options={
                'verbose_name': 'Tolerance Configuration',
                'verbose_name_plural': 'Tolerance Configurations',
                'db_table': 'tolerance_configurations',
            },
        ),
    ]
