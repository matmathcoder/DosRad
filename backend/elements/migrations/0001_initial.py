# Generated by Django 5.2.5 on 2025-09-06 19:55

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0004_examplescene_computationconfiguration_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('atomic_number', models.PositiveIntegerField(unique=True)),
                ('symbol', models.CharField(max_length=4, unique=True)),
                ('name', models.CharField(max_length=64)),
                ('atomic_mass', models.FloatField(blank=True, null=True)),
                ('density', models.FloatField(blank=True, help_text='Density in g/cm³', null=True)),
                ('melting_point', models.FloatField(blank=True, help_text='Melting point in K', null=True)),
                ('boiling_point', models.FloatField(blank=True, help_text='Boiling point in K', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['atomic_number'],
            },
        ),
        migrations.CreateModel(
            name='Isotope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mass_number', models.PositiveIntegerField()),
                ('half_life', models.CharField(blank=True, max_length=128, null=True)),
                ('decay_mode', models.CharField(blank=True, default='', max_length=64)),
                ('decay_product', models.CharField(blank=True, max_length=64, null=True)),
                ('is_stable', models.BooleanField(default=False)),
                ('neutron_number', models.PositiveIntegerField(blank=True, null=True)),
                ('abundance', models.FloatField(blank=True, help_text='Natural abundance as percentage', null=True)),
                ('spin_parity', models.CharField(blank=True, default='', help_text='Nuclear spin and parity', max_length=16)),
                ('magnetic_moment', models.FloatField(blank=True, help_text='Nuclear magnetic moment in μN', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='isotopes', to='elements.element')),
            ],
            options={
                'ordering': ['element__atomic_number', 'mass_number'],
                'unique_together': {('element', 'mass_number')},
            },
        ),
        migrations.CreateModel(
            name='NeutronReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('n_gamma', 'Neutron capture (n,γ)'), ('n_p', 'Neutron-proton (n,p)'), ('n_alpha', 'Neutron-alpha (n,α)'), ('n_2n', 'Neutron-2neutron (n,2n)'), ('n_f', 'Neutron-induced fission (n,f)'), ('n_d', 'Neutron-deuteron (n,d)'), ('n_t', 'Neutron-triton (n,t)'), ('n_3n', 'Neutron-3neutron (n,3n)')], max_length=16)),
                ('threshold_energy', models.FloatField(default=0.0, help_text='Minimum neutron energy in eV')),
                ('q_value', models.FloatField(blank=True, help_text='Energy released in MeV', null=True)),
                ('resonance_energy', models.FloatField(blank=True, help_text='Resonance energy in eV', null=True)),
                ('resonance_width', models.FloatField(blank=True, help_text='Resonance width in eV', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product_isotope', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='neutron_reactions_as_product', to='elements.isotope')),
                ('target_isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='neutron_reactions_as_target', to='elements.isotope')),
            ],
            options={
                'ordering': ['target_isotope__element__atomic_number', 'target_isotope__mass_number'],
                'unique_together': {('target_isotope', 'product_isotope', 'reaction_type')},
            },
        ),
        migrations.CreateModel(
            name='ElementComposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Composition name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Composition description')),
                ('density', models.FloatField(help_text='Density in g/cm³')),
                ('color', models.CharField(default='#888888', help_text='Display color', max_length=7)),
                ('elements', models.JSONField(default=list, help_text='List of {element_id, percentage} objects')),
                ('molecular_weight', models.FloatField(blank=True, help_text='Molecular weight in g/mol', null=True)),
                ('phase', models.CharField(blank=True, default='solid', help_text='Phase (solid, liquid, gas)', max_length=32)),
                ('temperature', models.FloatField(blank=True, help_text='Temperature in K', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='element_compositions', to='projects.project')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='GammaSpectrum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('energy', models.FloatField(help_text='Gamma energy in keV')),
                ('intensity', models.FloatField(help_text='Relative intensity')),
                ('multipolarity', models.CharField(blank=True, default='', help_text='Gamma multipolarity', max_length=8)),
                ('origin', models.CharField(blank=True, default='', help_text='Data source', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gamma_spectra', to='elements.isotope')),
            ],
            options={
                'ordering': ['isotope__element__atomic_number', 'isotope__mass_number', 'energy'],
                'indexes': [models.Index(fields=['isotope', 'energy'], name='elements_ga_isotope_f3a209_idx')],
                'unique_together': {('isotope', 'energy')},
            },
        ),
        migrations.CreateModel(
            name='DecayPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decay_type', models.CharField(choices=[('alpha', 'Alpha decay (α)'), ('beta_minus', 'Beta minus decay (β-)'), ('beta_plus', 'Beta plus decay (β+)'), ('electron_capture', 'Electron capture (EC)'), ('spontaneous_fission', 'Spontaneous fission (SF)'), ('proton_emission', 'Proton emission (p)'), ('neutron_emission', 'Neutron emission (n)'), ('gamma', 'Gamma decay (γ)'), ('internal_transition', 'Internal transition (IT)')], max_length=32)),
                ('branching_ratio', models.FloatField(default=1.0, help_text='Fraction of decays via this path')),
                ('q_value', models.FloatField(blank=True, help_text='Energy released in MeV', null=True)),
                ('half_life', models.CharField(blank=True, help_text='Half-life for this specific decay path', max_length=128, null=True)),
                ('energy_released', models.FloatField(blank=True, help_text='Energy released in MeV', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daughter_isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decay_parents', to='elements.isotope')),
                ('parent_isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='decay_children', to='elements.isotope')),
            ],
            options={
                'ordering': ['parent_isotope__element__atomic_number', 'parent_isotope__mass_number'],
                'unique_together': {('parent_isotope', 'daughter_isotope', 'decay_type')},
            },
        ),
        migrations.CreateModel(
            name='IsotopeSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Source name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Source description')),
                ('activity', models.FloatField(help_text='Activity in Bq')),
                ('mass', models.FloatField(blank=True, help_text='Mass in g', null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume in cm³', null=True)),
                ('source_type', models.CharField(default='point', help_text='Source type (point, volume, surface)', max_length=32)),
                ('energy_spectrum', models.JSONField(default=list, help_text='Energy spectrum data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('geometry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='isotope_sources', to='projects.geometry')),
                ('isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='elements.isotope')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='isotope_sources', to='projects.project')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='NeutronCrossSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target', models.CharField(help_text='Target nucleus', max_length=32)),
                ('reaction', models.CharField(help_text='Reaction type', max_length=32)),
                ('origin', models.CharField(blank=True, default='', help_text='Data source', max_length=64)),
                ('energy', models.FloatField(help_text='Neutron energy in eV')),
                ('cross_section', models.FloatField(help_text='Cross section in barns')),
                ('uncertainty', models.FloatField(blank=True, help_text='Uncertainty in cross section', null=True)),
                ('range_url', models.URLField(blank=True, default='', help_text='URL to energy range data', max_length=256)),
                ('isotope_url', models.URLField(blank=True, default='', help_text='URL to isotope data', max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('isotope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cross_sections', to='elements.isotope')),
                ('neutron_reaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cross_section_data', to='elements.neutronreaction')),
            ],
            options={
                'ordering': ['isotope__element__atomic_number', 'isotope__mass_number', 'energy'],
                'indexes': [models.Index(fields=['isotope', 'energy'], name='elements_ne_isotope_7a4eba_idx'), models.Index(fields=['reaction', 'energy'], name='elements_ne_reactio_d0be39_idx')],
            },
        ),
    ]
